// Задание 1:
// Напиши собственную реализацию функции высшего порядка, похожую на Array.forEach.
// 1. Назови её processArray.
// 2. Она должна принимать два аргумента: array (массив для обработки) и callback (функция, которую нужно применить к каждому элементу).
// 3. Твоя функция должна перебрать каждый элемент массива и для каждого из них вызвать callback, передав в него сам элемент.

const numbers = [1, 2, 3, 4];

function processArray(array, callback) {
  for (const num of array) {
    callback(num);
  }
}

processArray(numbers, function (number) {
  console.log(`Квадрат числа ${number} равен ${number * number}`);
});

/*
Вывод в консоли:
Квадрат числа 1 равен 1
Квадрат числа 2 равен 4
Квадрат числа 3 равен 9
Квадрат числа 4 равен 16
*/

// Задание 2:
// Напиши функцию-фабрику createLogger.
// 1. Эта функция должна принимать один аргумент type (например, строка "INFO", "WARN" или "ERROR").
// 2. Она должна возвращать новую функцию.
// 3. Возвращенная функция, в свою очередь, должна принимать один аргумент message (строку с сообщением).
// 4. Когда мы вызываем возвращенную функцию, она должна выводить в консоль отформатированное сообщение, включающее type, который она "запомнила".
// Подсказка: Вспомни наш теоретический пример createMultiplier и механизм замыкания (closure). Он здесь — ключ к решению.

function createLogger(type) {
  return function (message) {
    return `[${type}]: ${message}`;
  };
}

const infoLogger = createLogger('INFO');
const warnLogger = createLogger('WARN');

console.log(infoLogger('Система успешно запущена.')); // "[INFO]: Система успешно запущена."
console.log(warnLogger('Внимание: свободное место заканчивается.')); // "[WARN]: Внимание: свободное место заканчивается."

// Задание 3:
// У тебя есть массив объектов. Тебе нужно написать цепочку вызовов, чтобы получить строку с именами активных пользователей в верхнем регистре, разделенными запятой.
// Нужно сделать следующее:
// 1. Отфильтровать массив, оставив только активных пользователей (isActive: true).
// 2. Из отфильтрованного массива получить новый массив, содержащий только имена пользователей.
// 3. Преобразовать все имена в верхний регистр.
// 4. Объединить массив имен в одну строку, где имена разделены запятой.
// Используй стандартные методы массивов: filter, map и join.
// Подсказка: Представь, что данные проходят по конвейеру. users -> filter -> map -> join. Каждый метод передает свой результат следующему.

const users = [
  { name: 'Alice', age: 30, isActive: true },
  { name: 'Bob', age: 25, isActive: false },
  { name: 'Charlie', age: 35, isActive: true },
  { name: 'David', age: 22, isActive: false },
  { name: 'Eve', age: 28, isActive: true },
];

const activeUsersString = users
  .filter((user) => user.isActive === true)
  .map((user) => user.name.toUpperCase())
  .join(',');

console.log(activeUsersString); // "ALICE,CHARLIE,EVE"
console.log(users); // без изменений
